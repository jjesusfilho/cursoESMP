---
title: "Aula 04 - Introdução ao R"
author: "Ricardo Feliz Okamoto"
format:
  revealjs: 
    theme: [default, assets/custom.scss]
    logo: "assets/logo-mpsp.png"
    center-title-slide: true
execute:
  echo: true
  eval: false
---

## Objetivos da aula

- Compreender o `base R`
- Introduzir o `tidyverse`
- Aprender os verbos básicos do `dplyr`

## Como a aula está planejada?

- Serão três "pílulas" de aula
- Cada pílula terá a seguinte estrutura (flexível)
  - 15min de exposição
  - 20min de exercícios
  - 20min de resolução
  - 5min de intervalo

# Pílula [1]{.pill-1}

## [I]{.pill-1} R, RStudio, IDE ?

- R é a linguagem de programação.
- Mas você precisa programar essa linguagem em algum lugar.
- Para isso, precisamos de um lugar para digitar o código e outro lugar para executar o código
  - Podemos até **digitar** em R em uma mensagem de WhatsApp, em um bloco de texto, ou em uma pesquisa Google. Entretanto, esses códigos não vão "fazer nada". 
  - A gente precisa fazer esses códigos serem **executados**

## [I]{.pill-1} R, RStudio, IDE ?

- Para juntar o lugar em que **digitamos/editamos** com o lugar em que  **executamos**, usamos alguns ambientes de programação integrados, conhecidos como IDE (Integrated Development Environment).
- A IDE do R mais usada é o RStudio, mas essa não é a única IDE possível

## [I]{.pill-1} Familiarizando-nos com o RStudio

- **Source**
- **Console**
- Environment
- Files

## [I]{.pill-1} Base R x pacotes

Existem "coisas" que já vem no R assim que você instala; e "coisas" que outras pessoas criaram com base no que já veio no R e que você precisa instalar. 

- As "coisas" que já vem no R, nós chamamos de `base R`
- As "coisas" que foram criadas por outras pessoas, nós chamamos de **pacotes**


## [I]{.pill-1} Chamando funções (_function calling_)

Para "chamar" funções, usamos a notação:

```{r}
nome_da_funcao()
```

- O elemento que merece um destaque especial aqui são os parênteses `()`

## [I]{.pill-1} Chamando funções (_function calling_)

Funções recebem "argumentos"; e cada argumento recebe "valores".

```{r}
nome_da_funcao(argumento1 = valor1, argumento2 = valor2)
```

- Quem dá o nome dos argumentos é a própria função (você deve obedecer aos nomes que ela te oferece)

```{r}
nome_da_funcao(argumentoHAHAHA = valor1, argumentoABACAXI = valor2) 
# não funciona
```

- Quem dá o nome dos valores é você mesmo

```{r}
nome_da_funcao(argumento1 = valorHAHAHHAHA, argumento2 = valorABACAXI) 
# funciona
```

## [I]{.pill-1} Vamos falar sobre nomes

- Falar de "nomes" de valores só faz sentido quando criamos objetos. 
- Para criar objetos, fazemos uma **atribuição**, representada por `<-`

```{r}
nomeQueEuCriei <- "valor"
```

## [I]{.pill-1} Vamos falar sobre nomes

Os nomes devem obedecer a certas regras:

- podem conter letras, números e caracteres especiais (apenas `_` e `.`)
- não pode se iniciar com números ou caracteres especiais
- é _case sensitive_ 

```{r}
nome # pode
nome1234 # pode
1234nome # não pode
n.o.m.e # pode
no_me # pode
_nome_ # não pode
```

## [I]{.pill-1} Vamos falar sobre nomes

Existem certas convenções sobre nomes:

- camelCase: As partes do nome são marcadas por letras **maiúsculas**
- snake_case: As partes do nome são marcadas por underline `_`

```{r}
nomeQueEuCriei # camelCase
nome_que_eu_criei # snake_case
```

A convenção no R é usar o snake_case

## [I]{.pill-1} Vetores

A unidade básica do R são os vetores. Existem dois tipos (mais um) de vetores:

- Vetores atômicos (_atomic vectors_) : São sequências de valores homogêneos. Os tipos de valores mais comuns são: **logical**, **numeric** (**integer** e **double**) e **character**. 
- Listas (_lists_) : São sequências heterogêneas de valores.
- `NULL` : É o não-vetor, ou um vetor de tamanho 0

## [I]{.pill-1} Vetores

::: {.center}
```{r, echo=FALSE, eval=TRUE, out.width="60%", out.height="60%",fig.cap="Fonte: R4DS"}
knitr::include_graphics("assets/data-structures-overview.png")
```
:::

## [I]{.pill-1} Vetores

- A função `c()` é muito importante para os vetores. Ela serve para combinar valores dentro de si. 

```{r}
valor <- c(1, 2, 3, 4, 5)
valor
#> [1] 1 2 3 4 5
```
## [I]{.pill-1} Vetores

Qual dos seguintes vetores são atômicos e quais são listas?

```{r}
vetor1 <- 1
vetor2 <- c(1, 2, 3, 4, 5)
vetor3 <- "abacaxi"
vetor4 <- c("a", "b", "c", "d")
```

A) Todos são vetores atômicos
B) Os vetores 1 e 3 são vetores atômicos e os vetores 2 e 4 são listas
C) Os vetores 1 e 2 são vetores atômicos e os vetores 3 e 4 são listas
D) Todos são listas

## [I]{.pill-1} Vetores

Qual dos seguintes vetores são atômicos e quais são listas?

```{r}
vetor1 <- 1
vetor2 <- c(1, 2, 3, 4, 5)
vetor3 <- "abacaxi"
vetor4 <- c("a", "b", "c", "d")
```

A) **Todos são vetores atômicos**
B) Os vetores 1 e 3 são vetores atômicos e os vetores 2 e 4 são listas
C) Os vetores 1 e 2 são vetores atômicos e os vetores 3 e 4 são listas
D) Todos são listas


## [I]{.pill-1} Vetores

O que vocês acham do seguinte vetor? Ele é um vetor atômico ou uma lista?

```{r}
vetorX <- c(1.5, "2", 3L, 4, "5")
```
A) É um vetor atômico do tipo numeric (seja integer, seja double)
B) É uma lista com elementos do tipo double, character e integer
C) É um vetor atômico do tipo character

## [I]{.pill-1} Vetores

O que vocês acham do seguinte vetor? Ele é um vetor atômico ou uma lista?

```{r}
vetorX <- c(1.5, "2", 3L, 4, "5")
```
A) É um vetor atômico do tipo numeric (seja integer, seja double)
B) É uma lista com elementos do tipo double, character e integer
C) **É um vetor atômico do tipo character**

## [I]{.pill-1} Vetores

O que vocês acham dos seguintes vetores? São vetores atômicos ou listas?

```{r}
vetorA <- list(
  c("a", "b", "c"),
  c("1", "2", "3", "4")
)
vetorB <- list(
  c("a", "b", "c"),
  c(1, 2, 3)
)
```
A) Ambos vetores são vetores atômicos.
B) O vetorA é um vetor atômico e o vetorB é uma lista.
C) O vetorA é uma lista e o vetorB é um vetor atômico.
D) Ambos os vetores são listas.


## [I]{.pill-1} Vetores

O que vocês acham dos seguintes vetores? São vetores atômicos ou listas?

```{r}
vetorA <- list(
  c("a", "b", "c"),
  c("1", "2", "3", "4")
)
vetorB <- list(
  c("a", "b", "c"),
  c(1, 2, 3)
)
```
A) Ambos vetores são vetores atômicos.
B) O vetorA é um vetor atômico e o vetorB é uma lista.
C) O vetorA é uma lista e o vetorB é um vetor atômico.
D) **Ambos os vetores são listas.**

## [I]{.pill-1} Vetores

- Existe uma função do `base R` chamada `typeof()`. Ela checa o tipo de vetores.

:::: columns
::: {.column width=50%}
```{r, eval=TRUE, message=TRUE}
typeof(1)
typeof(1L)
typeof("1")
```
:::

::: {.column width=50%}
```{r, eval=TRUE, message=TRUE}
typeof(TRUE)
typeof("TRUE")
```
:::
::::


## [I]{.pill-1} Vetores

:::: columns
::: {.column width=50%}
```{r, eval=TRUE, message=TRUE}
vetor1 <- 1
typeof(vetor1)
vetor2 <- c(1, 2, 3, 4, 5)
typeof(vetor2)
vetor3 <- "abacaxi"
typeof(vetor3)
vetor4 <- c("a", "b", "c", "d")
typeof(vetor4)
vetorX <- c(1.5, "2", 3L, 4, "5")
typeof(vetorX)
```
:::

::: {.column width=50%}
```{r, eval=TRUE, message=TRUE}
vetorA <- list(
  c("a", "b", "c"),
  c("1", "2", "3", "4")
)
typeof(vetorA)

vetorB <- list(
  c("a", "b", "c"),
  c(1, 2, 3)
)
typeof(vetorB)
```
:::
::::


## [I]{.pill-1} Atribuição (_assignement_)

- Já vimos o operador `<-`. Ele servia para "colocar" um valor "dentro" um objeto.

```{r, eval=TRUE}
a <- 1
b <- "1"
```

- Esse procedimento se chama "atribuição" (_assignement_), ou seja, eu "atribuo" um valor a um objeto.

## [I]{.pill-1} Atribuição (_assignement_)

- Outra forma de atribuição é por meio do operador `=`

```{r}
a = 1
b = "1"
```

- Mas vamos usar apenas o operador `<-`

## [I]{.pill-1} Comparações

- Podemos agora comparar objetos entre si. Todas as comparações resultam em uma avaliação do tipo `TRUE/FALSE`. 

- Algumas comparações possíveis são:

::::columns
:::column
- a > b
- a < b
- a == b
:::
:::column
- a >= b
- a <= b
:::
::::

## [I]{.pill-1} Comparações

- Cuidado com **floating point**

```{r, eval=T, message=T}
a = 0.38
b = 0.08
print(a-b)
```

- O que vocês esperam que seja o resultado da seguinte expressão? TRUE ou FALSE?

```{r}
(a-b) == 0.3
```


## [I]{.pill-1} Comparações

- Cuidado com **floating point**

```{r, eval=T, message=T}
a = 0.38
b = 0.08
print(a-b)
```

- O que vocês esperam que seja o resultado da seguinte expressão? TRUE ou FALSE?

```{r, eval=T, message=T}
(a-b) == 0.3
```

## [I]{.pill-1} Comparações

- Cuidado com **floating point**

```{r, echo=F, eval=T, message=T}
knitr::include_graphics("assets/floating.png")
```

## [I]{.pill-1} Baixando pacotes

Para baixar pacotes usamos a seguinte função nativa (do base R): 

```{r}
install.packages("nome do pacote")
```

A lista de todos pacotes possíveis que podem entrar em "nome do pacote" está disponível no CRAN (Comprehensive R Archive Network):

[https://cran.r-project.org/web/packages/available_packages_by_name.html](https://cran.r-project.org/web/packages/available_packages_by_name.html)

## [I]{.pill-1} Baixando pacotes

- Mas podemos baixar pacotes que não estão no CRAN, e que estão apenas em "desenvolvimento" no github, ou mesmo baixar a versão de "desenvolvimento" dos pacotes que estão no CRAN.
- Não existe função nativa do R para fazer isso. Então usamos um pacote criado para isso, chamado `remotes`.

```{r}
remotes::install_github(repo = "usuario ou organização/nome do pacote") 
# preste atenção na sintaxe
```

## [I]{.pill-1} Baixando pacotes

O que colocar no argumento `repo` ?

::: {.center}
```{r, echo=FALSE, eval=TRUE, out.width="60%", out.height="60%"}
knitr::include_graphics("assets/tidyverse-dplyr.png")
```
:::

```{r}
remotes::install_github(repo = "tidyverse/dplyr") 
```

## [I]{.pill-1} Baixando pacotes

O que colocar no argumento `repo` ?

::: {.center}
```{r, echo=FALSE, eval=TRUE, out.width="60%", out.height="60%"}
knitr::include_graphics("assets/jjesusfilho-cursoESMP.png")
```
:::

```{r}
remotes::install_github(repo = "jjesusfilho/cursoESMP") 
```

## [I]{.pill-1} Usando pacotes

Um pacote contém _funções_ e _dados_.

- Para usar uma **função** de um pacote no R, fazemos:
  
```{r}
pacote::funcao()
```

- Para usar os **dados** de um pacote no R, fazemos:
  
```{r}
pacote::dado
```

## [I]{.pill-1} Usando pacotes

Ao invés de puxarmos uma única função de um pacote ou uma única base de dados, podemos puxar tudo de uma vez. 

```{r}
library(pacote)
```

Repare na diferença de sintaxe

```{r}
install.packages("remotes") # tem aspas
library(remotes) # não tem aspas
```

## [I]{.pill-1} Usando pacotes

- Se tiver usado `library(pacote)` antes, então não precisamos dizer o nome do pacote, seguido de `::` .
- Neste caso, para usar uma **função**, fazemos:
  
```{r}
funcao()
```

- Neste caso, para usar **dados**, fazemos:
  
```{r}
dado
```

## [I]{.pill-1} Usando pacotes

:::: columns
::: column
Método 1 - Puxando funções e dados específicos

```{r}
pacote::funcao()
pacote::dado
```
:::
::: column
Método 2 - Puxando a biblioteca inteira do pacote

```{r}
library(pacote)
funcao()
dado
```
:::
::::


## Baixando pacotes - [Exercício rápido]{.pill-1}

Com base no seguinte modelo que vimos, responda: 
```{r}
remotes::install_github(repo = "usuario ou organização/nome do pacote") 
```

1. Qual é o nome do pacote que está sendo utilizado?
2. E qual é o nome da função?
3. Essa função recebe algum argumento? Se sim, qual é o seu nome?
4. Poderíamos escrever assim? Justifique

```{r}
remotes::install_github(pacote = "usuario ou organização/nome do pacote") 
```


## [Exercícios]{.pill-1}


# Pílula [2]{.pill-2}

## [I]{.pill-2} Tidyverse

- Tidyverse é um conjunto de pacotes criados pelo Hadley Wickham
- O tidyverse introduziu uma nova forma de programar em R, de forma que é totalmente diferente programar usando as funções do `baseR` e as funções do `tidyverse`
- Neste curso, iremos aprender a programar com o `tidyverse` e não com o `baseR`. Hoje, iremos ver o primeiro pacote : `dplyr`

## [I]{.pill-2} Filter

- Existe uma função nativa chamada `filter()`, mas vamos usar a função `dplyr::filter()` apenas. Elas possuem sintaxes diferentes. 
- O `dplyr::filter()` funciona para "filtrar" linhas de uma base, mantendo apenas aquelas que satisfizerem determinadas condições.
- Ele não exclui nenhuma coluna

## [I]{.pill-2} Filter

```{r, eval=T, message=T}
letters
```

::: {.fragment}
- Isso é **base R** (nativo) ou vem de um **pacote**?
:::
::: {.fragment}
- Isso é uma **função nativa** ou são **dados nativos**?
:::
::: {.fragment}
- Esses dados são um **vetor atômico** ou uma **lista**?
:::
::: {.fragment}
- Qual é o tipo esperado desse vetor atômico? `character`, `double`, `numeric` ou `logical`?
:::
::: {.fragment}
```{r, eval=T, message=T}
typeof(letters)
```
:::


## [I]{.pill-2} Filter

```{r, eval=T, message=T}
base <- tibble::tibble(
  id = letters[1:10],
  valor = 1:10
)

base
```

## [I]{.pill-2} Filter

```{r}
base <- tibble::tibble(
  id = letters[1:10],
  valor = 1:10
)

dplyr::filter(base, valor < 2)
```

- Quais linhas vocês esperam que sejam retornadas? Digitem no chat o `id` das linhas, isto é, as letras correspondentes a cada linha. 

::: {.fragment}
```{r, eval=T, message=T}
dplyr::filter(base, valor < 2)
```
:::

## [I]{.pill-2} Filter

```{r}
base <- tibble::tibble(
  id = letters[1:10],
  valor = 1:10
)

dplyr::filter(base, valor <= 5)
```

- Quais linhas vocês esperam que sejam retornadas? Digitem no chat o `id` das linhas, isto é, as letras correspondentes a cada linha. 

::: {.fragment}
```{r, eval=T, message=T}
dplyr::filter(base, valor <= 5)
```
:::

## [I]{.pill-2} Filter

```{r}
base <- tibble::tibble(
  id = letters[1:10],
  valor = 1:10
)

dplyr::filter(base, valor == 2)
```

- Quais linhas vocês esperam que sejam retornadas? Digitem no chat o `id` das linhas, isto é, as letras correspondentes a cada linha. 

::: {.fragment}
```{r, eval=T, message=T}
dplyr::filter(base, valor == 2)
```
:::

## [I]{.pill-2} Filter

```{r}
base <- tibble::tibble(
  id = letters[1:10],
  valor = 1:10
)

dplyr::filter(base, valor == c(2, 3, 4))
```

- Quais linhas vocês esperam que sejam retornadas? Digitem no chat o `id` das linhas, isto é, as letras correspondentes a cada linha. 

::: {.fragment}
```{r, eval=T, message=T}
dplyr::filter(base, valor == c(2, 3, 4))
```
:::

## [I]{.pill-2} Filter

```{r}
base <- tibble::tibble(
  id = letters[1:10],
  valor = 1:10
)

dplyr::filter(base, valor %in% c(2, 3, 4))
```

- Quais linhas vocês esperam que sejam retornadas? Digitem no chat o `id` das linhas, isto é, as letras correspondentes a cada linha. 


::: {.fragment}
```{r, eval=T, message=T}
dplyr::filter(base, valor %in% c(2, 3, 4))
```
:::

## [I]{.pill-2} Filter

```{r}
base <- tibble::tibble(
  id = letters[1:10],
  valor = 1:10
)

dplyr::filter(base, valor %% 2 == 2)
```

- Quais linhas vocês esperam que sejam retornadas? Digitem no chat o `id` das linhas, isto é, as letras correspondentes a cada linha. 


::: {.fragment}
```{r, eval=T, message=T}
dplyr::filter(base, valor %% 2 == 2)
```
:::

## [I]{.pill-2} Filter

- O `dplyr::filter()` funciona com a seguinte sintaxe:

```{r}
dplyr::filter(dados, <relação lógica 1>, <relação lógica 2>, ...)
```

- Isso significa que primeiro ele recebe a base de dados e depois a gente vai criar relações lógicas para manter ou excluir certas colunas. 

## [I]{.pill-2} Filter

- Como funciona o `dplyr::filter()` por trás?

```{r}
base <- tibble::tibble(
  id = letters[1:10], # letters
  valor = 1:10
)

base$valor
#> [1]  1  2  3  4  5  6  7  8  9 10
base$valor == 2 
#> [1] FALSE  TRUE FALSE FALSE FALSE FALSE FALSE FALSE FALSE FALSE

dplyr::filter(base, valor == 2)
#> # A tibble: 1 × 2
#>   id    valor
#>   <chr> <int>
#> 1 b         2
```

## [I]{.pill-2} Select

- O `dplyr::select()` mantém todas as linhas, mas exclui as colunas que você não **selecionar**. 

```{r, eval=T, message=T}
da <- tibble::tibble(
  letras = letters[1:5], # letters
  numeros = 1:5,
  blabla = letters[1:5],
  excluir = blabla
)

dplyr::select(da, letras, numeros)
```

## [I]{.pill-2} Select

- Eu posso renomear a coluna enquanto seleciono

```{r, eval=T, message=T}
da <- tibble::tibble(
  letras = letters[1:5], # letters
  numeros = 1:5,
  blabla = letters[1:5],
  excluir = blabla
)

dplyr::select(da, id = letras, valor = numeros)
```


## [I]{.pill-2} Select

- Eu posso também indicar quais colunas eu NÃO quero manter

```{r, eval=T, message=T}
da <- tibble::tibble(
  letras = letters[1:5], # letters
  numeros = 1:5,
  blabla = letters[1:5],
  excluir = blabla
)

dplyr::select(da, -blabla, -excluir)
```

## [I]{.pill-2} Select

- Eu também posso indicar as colunas a manter pelo seu número

```{r, eval=T, message=T}
da <- tibble::tibble(
  letras = letters[1:5], # letters
  numeros = 1:5,
  blabla = letters[1:5],
  excluir = blabla
)

dplyr::select(da, 1:2)
```

## [I]{.pill-2} Mutate

- O `dplyr::mutate()` é uma das funções mais importantes. Ele nos permite modificar colunas já existentes ou adicionar/criar colunas novas na base.

```{r, eval=T, message=T}
base <- tibble::tibble(
  id = letters[1:5],
  valor = 1:5
)

dplyr::mutate(base, valor_duplicado=valor*2)
```

## [I]{.pill-2} Pipe

- O pipe é uma forma de concatenar vários inputs/outpus em uma sequência única
- Esse sequência, nós chamamos de **pipeline** (literalmente, "linha do pipe")

## [I]{.pill-2} Pipe

```{r}
da1 <- tibble::tibble(
  letras = letters[1:10],
  numeros = 1:10,
  logicos = c(T, F, T, T, F, F, T, F, T, T)
)

# sem pipe
da2 <- dplyr::mutate(da1, duplicados = numeros * 2)
da3 <- dplyr::mutate(da2, frases = paste0("Letra terminada em: ", letras))
da_final <- dplyr::select(da3,letras, frases, numeros, duplicados, logicos)

# com pipe
da1 |> 
  dplyr::mutate(
    duplicados = numeros *2
  ) |> 
  dplyr::mutate(
    frases = paste0("Letra terminada em: ", letras)
  ) |> 
  dplyr::select(letras, frases, numeros, duplicados, logicos)
```

## [I]{.pill-2} Pipe

- O pipe, originalmente, não era algo nativo do R (não existia no baseR)
- Ele foi criado pelo Hadley Wickham, no pacote `magrittr` (outro pacote do conjunto `tidyverse`) e tinha essa cara:

```{r}
library(magrittr)

da1 %>% 
  dplyr::mutate(duplicados = numeros *2) 
```

- Atualmente, o pipe foi integrado no baseR e já vem instalado e tem esta cara:

```{r}
da1 |> 
  dplyr::mutate(duplicados = numeros *2) 
```

## [I]{.pill-2} Pipe

- Para digitar o pipe, basta apertar `crtl` + `shift` + `m` (tudo ao mesmo tempo). Ao pressionar estas teclas aparece, via de regra, o pipe antigo `%>%`
- Para usar o pipe antigo, vocês precisam SEMPRE carregar a biblioteca do `magrittr`. Este é um caso em que não é possível usar a "função" do pacote pelo método: `magrittr::%>%`. Sempre é necessário carregar a biblioteca antes. 
- Recomendo fortemente trocar o default `%>%` pelo `|>`. Você faz isso em **Tools > Global Options > Code > Use native pipe operator |> (requires R 4.1+)**

# Pílula [3]{.pill-3}

## [I]{.pill-3} Distinct

- Podemos descobrir todas as categorias existentes de uma determinada coluna com a função `dplyr::distinct()`

```{r, eval=T, message=T}
da3 <- tibble::tibble(
  a = c("a", "a", "a", "a", "a", "b", "b", "c", "c", "c")
)

da3 |> 
  dplyr::distinct(a)
```

## [I]{.pill-3} Distinct

- Essa função pode receber várias colunas. Neste caso, ela vai manter toda a combinatória de casos encontrados

```{r, eval=T, message=T}
da3 <- tibble::tibble(
  a = c("a", "a", "h", "a", "a", "b", "d", "c", "c", "c"),
  b = c("b", "d", "e", "a", "a", "f", "e", "c", "c", "c")
)

da3 |> 
  dplyr::distinct(a, b)
```
## [I]{.pill-3} Count

- Podemos contar a quantidade de linhas com um mesmo valor em uma determinada coluna com a função `dplyr::count()`

```{r, eval=T, message=T}
da3 <- tibble::tibble(
  a = c("a", "a", "a", "a", "a", "b", "b", "c", "c", "c")
)

da3 |> 
  dplyr::count(a)
```

## [I]{.pill-3} Group by, Summarise e Ungroup

- O `dplyr::summarise()` é uma das funções mais úteis. Ela **resume** várias linhas. 

```{r, eval=T, message=T}
set.seed(3)
da3 <- tibble::tibble(
  a = c("a", "a", "a", "a", "a", "b", "b", "c", "c", "c"),
  b = sample(1:10, 10, replace=T)
)

da3 |> 
  dplyr::summarise(
    somatoria = sum(b)
  ) 
```
## [I]{.pill-3} Group by, Summarise e Ungroup

- O `dplyr::summarise()` é **normalmente** é usado junto da função `dplyr::group_by()`
- E sempre que o `dplyr::group_by()` é usado, precisamos usar o `dplyr::ungroup()` depois. 
- Ao agrupar os dados por alguma categoria, então o resumo criado pelo `summarise()` fica agrupado. 
- Vamos ver algumas funções importantes de resumo

## [I]{.pill-3} Group by, Summarise e Ungroup

```{r, eval=T, message=T}
set.seed(3)
da3 <- tibble::tibble(
  a = c("a", "a", "a", "a", "a", "b", "b", "c", "c", "c"),
  b = sample(1:10, 10, replace=T)
)

da3 |> 
  dplyr::group_by(a) |> 
  dplyr::summarise(
    somatoria = sum(b)
  ) |> 
  dplyr::ungroup()
```

## [I]{.pill-3} Group by, Summarise e Ungroup

```{r, eval=T, message=T}
set.seed(3)
da3 <- tibble::tibble(
  a = c("a", "a", "a", "a", "a", "b", "b", "c", "c", "c"),
  b = sample(1:10, 10, replace=T)
)

da3 |> 
  dplyr::group_by(a) |> 
  dplyr::summarise(
    media = mean(b)
  ) |> 
  dplyr::ungroup()
```

## [I]{.pill-3} Group by, Summarise e Ungroup

```{r, eval=T, message=T}
set.seed(3)
da3 <- tibble::tibble(
  a = c("a", "a", "a", "a", "a", "b", "b", "c", "c", "c"),
  b = sample(1:10, 10, replace=T)
)

da3 |> 
  dplyr::group_by(a) |> 
  dplyr::summarise(
    mediana = median(b)
  ) |> 
  dplyr::ungroup()
```

## [I]{.pill-3} Group by, Summarise e Ungroup

```{r, eval=T, message=T}
set.seed(3)
da3 <- tibble::tibble(
  a = c("a", "a", "a", "a", "a", "b", "b", "c", "c", "c"),
  b = sample(1:10, 10, replace=T),
  c = sample(c(TRUE, FALSE), 10, replace=T)
)

da3 |> 
  dplyr::group_by(a) |> 
  dplyr::summarise(
    somatoria = all(c)
  ) |> 
  dplyr::ungroup()
```

## [I]{.pill-3} Arrange

- Por fim, podemos ordenar os valores para melhor visualizá-los por meio da função `dplyr::arrange()`
- Por default, ele ordena na ordem crescente (o menor em cima; e o maior embaixo)

## [I]{.pill-3} Arrange

```{r, eval=T, message=T}
set.seed(3)
da3 <- tibble::tibble(
  a = c("a", "a", "a", "a", "a", "b", "b", "c", "c", "c"),
  b = sample(1:10, 10, replace=T)
)

da3 |> 
  dplyr::group_by(a) |> 
  dplyr::summarise(
    somatoria = sum(b)
  ) |> 
  dplyr::ungroup() |> 
  dplyr::arrange(somatoria)
```

## [I]{.pill-3} Arrange

- E podemos ordenar os valores na ordem descrescente

```{r, eval=T, message=T}
set.seed(3)
da3 <- tibble::tibble(
  a = c("a", "a", "a", "a", "a", "b", "b", "c", "c", "c"),
  b = sample(1:10, 10, replace=T)
)

da3 |> 
  dplyr::group_by(a) |> 
  dplyr::summarise(
    somatoria = sum(b)
  ) |> 
  dplyr::ungroup() |> 
  dplyr::arrange(desc(somatoria))
```

## [I]{.pill-3} Arrange

- Se a ordenação for passada para variável numérica, ela irá dispor os dados em ordem de grandeza. Mas se for passada uma variável do tipo `character`, ela vai ordenar de forma alfabética. 

## [I]{.pill-3} Arrange

```{r, eval=T, message=T}
set.seed(3)
da3 <- tibble::tibble(
  a = letters[1:10],
  b = sample(1:10, 10, replace=T)
)

da3 |> 
  dplyr::arrange(a)
```


## [I]{.pill-3} Arrange

```{r, eval=T, message=T}
set.seed(3)
da3 <- tibble::tibble(
  a = letters[1:10],
  b = sample(1:10, 10, replace=T)
)

da3 |> 
  dplyr::arrange(desc(a))
```

## [I]{.pill-3} Arrange

- Nós podemos passar mais de um critério de ordenação
- E a ordem em que passamos esses critérios importa!!!

## [I]{.pill-3} Arrange

```{r, eval=T, message=T}
set.seed(3)
da3 <- tibble::tibble(
  a = c("a", "a", "a", "a", "a", "b", "b", "c", "c", "c"),
  b = sample(1:10, 10, replace=T)
)

da3 |> 
  dplyr::arrange(a, b)
```

## [I]{.pill-3} Arrange


```{r, eval=T, message=T}
set.seed(3)
da3 <- tibble::tibble(
  a = c("a", "a", "a", "a", "a", "b", "b", "c", "c", "c"),
  b = sample(1:10, 10, replace=T)
)

da3 |> 
  dplyr::arrange(b, a)
```




